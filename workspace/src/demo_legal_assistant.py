#!/usr/bin/env python3
"""
Demo script for the Legal Assistant
Showcases legal analysis capabilities for VC investment due diligence
"""

import warnings
import sys
import os
from dotenv import load_dotenv

# Suppress specific Pydantic warnings
warnings.filterwarnings("ignore", message=".*PydanticSerializationUnexpectedValue.*")
warnings.filterwarnings("ignore", category=UserWarning, module="pydantic.main")

load_dotenv()
ANTHROPIC_API_KEY = os.getenv("ANTHROPIC_API_KEY")

# Add the project root to the Python path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from workspace.src.legal_assistant import LegalAssistant


def demo_startup_legal_analysis():
    """Demo comprehensive legal analysis for startup investment."""
    print("‚öñÔ∏è ASSISTANT JURIDIQUE DEMO - ANALYSE D'INVESTISSEMENT STARTUP")
    print("=" * 80)
    
    assistant = LegalAssistant(ANTHROPIC_API_KEY)
    
    # Test Case 1: FinTech Startup
    print("\nüìä CAS D'√âTUDE 1: Startup FinTech - Plateforme de paiement")
    print("-" * 60)
    
    fintech_startup = """
    Une startup fran√ßaise d√©veloppe une plateforme de paiement mobile innovante 
    qui utilise l'intelligence artificielle pour d√©tecter les fraudes en temps r√©el. 
    La solution cible les e-commer√ßants et les marketplaces. L'entreprise pr√©voit 
    de lever 5M‚Ç¨ en s√©rie A et souhaite s'√©tendre en Europe dans les 18 prochains mois.
    """
    
    try:
        result = assistant.analyze_startup_legal_framework(fintech_startup, "FinTech")
        print(result)
    except Exception as e:
        print(f"Erreur dans l'analyse: {e}")
    
    print("\n" + "="*80)
    
    # Test Case 2: HealthTech Startup
    print("\nüè• CAS D'√âTUDE 2: Startup HealthTech - Dispositif m√©dical connect√©")
    print("-" * 60)
    
    healthtech_startup = """
    Une startup d√©veloppe un dispositif m√©dical connect√© pour le monitoring 
    cardiaque √† domicile. Le dispositif collecte des donn√©es biom√©triques 
    et utilise des algorithmes d'IA pour alerter les professionnels de sant√© 
    en cas d'anomalie. L'entreprise vise le march√© fran√ßais puis europ√©en.
    """
    
    try:
        result = assistant.analyze_startup_legal_framework(healthtech_startup, "HealthTech")
        print(result)
    except Exception as e:
        print(f"Erreur dans l'analyse: {e}")
    
    print("\n" + "="*80)


def demo_legal_risk_evaluation():
    """Demo legal risk evaluation for different business models."""
    print("\n‚ö†Ô∏è √âVALUATION DES RISQUES JURIDIQUES")
    print("=" * 80)
    
    assistant = LegalAssistant(ANTHROPIC_API_KEY)
    
    # Test Case 1: AI-powered SaaS
    print("\nü§ñ √âvaluation: Plateforme SaaS d'IA pour RH")
    print("-" * 50)
    
    ai_saas_model = """
    Plateforme SaaS qui utilise l'intelligence artificielle pour automatiser 
    le processus de recrutement. L'IA analyse les CV, conduit des entretiens 
    vid√©o automatis√©s et recommande les meilleurs candidats. La plateforme 
    traite des donn√©es personnelles sensibles et prend des d√©cisions automatis√©es.
    """
    
    try:
        result = assistant.evaluate_legal_risks(ai_saas_model, "France et UE")
        print(result)
    except Exception as e:
        print(f"Erreur dans l'√©valuation des risques: {e}")
    
    print("\n" + "="*80)


def demo_sector_regulations():
    """Demo sector-specific regulation research."""
    print("\nüìö RECHERCHE R√âGLEMENTAIRE SECTORIELLE")
    print("=" * 80)
    
    assistant = LegalAssistant(ANTHROPIC_API_KEY)
    
    # Research regulations for different sectors
    sectors = [
        "Intelligence Artificielle",
        "Technologies Financi√®res (FinTech)",
        "Technologies de Sant√© (HealthTech)"
    ]
    
    for sector in sectors:
        print(f"\nüîç Recherche r√©glementaire: {sector}")
        print("-" * 50)
        
        try:
            result = assistant.research_sector_regulations(sector)
            print(result)
        except Exception as e:
            print(f"Erreur dans la recherche pour {sector}: {e}")
        
        print("\n" + "="*80)


def demo_investment_legal_structure():
    """Demo investment legal structure analysis."""
    print("\nüèóÔ∏è ANALYSE DE STRUCTURE JURIDIQUE D'INVESTISSEMENT")
    print("=" * 80)
    
    assistant = LegalAssistant(ANTHROPIC_API_KEY)
    
    # Test different investment structures
    investment_types = [
        ("S√©rie A - Capital Risque", "5M‚Ç¨"),
        ("S√©rie B - Croissance", "15M‚Ç¨"),
        ("Investissement Strat√©gique", "25M‚Ç¨")
    ]
    
    for investment_type, amount in investment_types:
        print(f"\nüí∞ Analyse: {investment_type} - {amount}")
        print("-" * 50)
        
        try:
            result = assistant.analyze_investment_legal_structure(investment_type, amount)
            print(result)
        except Exception as e:
            print(f"Erreur dans l'analyse pour {investment_type}: {e}")
        
        print("\n" + "="*80)


def demo_individual_legal_tools():
    """Demo individual legal tool capabilities."""
    print("\nüõ†Ô∏è D√âMONSTRATION DES OUTILS JURIDIQUES INDIVIDUELS")
    print("=" * 80)
    
    # Import tools directly for testing
    from workspace.src.legifrance_search import search_legal_texts, analyze_legal_compliance, search_jurisprudence
    
    # Test legal text search
    print("\nüìú RECHERCHE DE TEXTES L√âGAUX: 'soci√©t√© par actions simplifi√©e'")
    print("-" * 50)
    try:
        legal_texts_result = search_legal_texts("soci√©t√© par actions simplifi√©e", "code", 3)
        print(legal_texts_result)
    except Exception as e:
        print(f"Erreur dans la recherche de textes l√©gaux: {e}")
    
    # Test compliance analysis
    print("\nüìã ANALYSE DE CONFORMIT√â: 'Plateforme e-commerce'")
    print("-" * 50)
    try:
        compliance_result = analyze_legal_compliance("Plateforme e-commerce avec marketplace", "SAS")
        print(compliance_result)
    except Exception as e:
        print(f"Erreur dans l'analyse de conformit√©: {e}")
    
    # Test jurisprudence search
    print("\n‚öñÔ∏è RECHERCHE JURISPRUDENTIELLE: 'droit des soci√©t√©s'")
    print("-" * 50)
    try:
        jurisprudence_result = search_jurisprudence("droit des soci√©t√©s", "responsabilit√© dirigeant", 3)
        print(jurisprudence_result)
    except Exception as e:
        print(f"Erreur dans la recherche jurisprudentielle: {e}")
    
    print("\n" + "="*80)


def main():
    """Run all legal assistant demos."""
    if not ANTHROPIC_API_KEY:
        print("‚ùå Erreur: ANTHROPIC_API_KEY non trouv√©e dans les variables d'environnement.")
        print("Veuillez configurer votre cl√© API dans le fichier .env.")
        return
    
    print("‚öñÔ∏è ASSISTANT JURIDIQUE POUR INVESTISSEURS VC")
    print("üèÜ D√©mo Hackathon - Analyse Juridique Compl√®te d'Investissement")
    print("=" * 80)
    
    try:
        # Run startup legal analysis demo
        demo_startup_legal_analysis()
        
        # Run legal risk evaluation demo
        demo_legal_risk_evaluation()
        
        # Run sector regulations demo
        demo_sector_regulations()
        
        # Run investment structure demo
        demo_investment_legal_structure()
        
        # Run individual tools demo
        demo_individual_legal_tools()
        
        print("\n‚úÖ D√âMONSTRATION TERMIN√âE AVEC SUCC√àS!")
        print("üéâ L'Assistant Juridique est pr√™t pour l'analyse d'investissements!")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è D√©monstration interrompue par l'utilisateur.")
    except Exception as e:
        print(f"\n‚ùå D√©monstration √©chou√©e avec l'erreur: {e}")
        print("Veuillez v√©rifier votre cl√© API et la connexion internet.")


if __name__ == "__main__":
    main()