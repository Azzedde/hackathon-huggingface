#!/usr/bin/env python3
"""
Test script demonstrating multi-agent collaboration for VC investment analysis
Shows how legal, technical, and brainstorming agents work together
"""

import warnings
import sys
import os
from dotenv import load_dotenv

# Suppress specific Pydantic warnings
warnings.filterwarnings("ignore", message=".*PydanticSerializationUnexpectedValue.*")
warnings.filterwarnings("ignore", category=UserWarning, module="pydantic.main")

load_dotenv()
ANTHROPIC_API_KEY = os.getenv("ANTHROPIC_API_KEY")

# Add the project root to the Python path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from workspace.src.simple_orchestrator import run_simple_orchestrator


def test_startup_investment_analysis():
    """Test comprehensive startup investment analysis using multiple agents."""
    print("üöÄ TEST DE COLLABORATION MULTI-AGENTS")
    print("üìä Analyse d'investissement startup compl√®te")
    print("=" * 80)
    
    # Startup case study
    startup_description = """
    Une startup fran√ßaise d√©veloppe une plateforme d'IA pour l'analyse automatique 
    de contrats juridiques. La solution utilise des mod√®les de langage avanc√©s pour 
    extraire les clauses importantes, identifier les risques et sugg√©rer des am√©liorations. 
    Elle cible les cabinets d'avocats et les d√©partements juridiques d'entreprises. 
    L'√©quipe souhaite lever 3M‚Ç¨ en s√©rie A.
    """
    
    print(f"üìã CAS D'√âTUDE: {startup_description}")
    print("\n" + "="*80)
    
    # Test 1: Technical Analysis
    print("\nüîß ANALYSE TECHNIQUE")
    print("-" * 50)
    technical_query = f"Analyse technique de cette startup: {startup_description}"
    
    try:
        technical_result = run_simple_orchestrator(technical_query, ["technical"])
        print(technical_result)
    except Exception as e:
        print(f"Erreur dans l'analyse technique: {e}")
    
    print("\n" + "="*80)
    
    # Test 2: Legal Analysis
    print("\n‚öñÔ∏è ANALYSE JURIDIQUE")
    print("-" * 50)
    legal_query = f"Analyse juridique et conformit√© pour cette startup: {startup_description}"
    
    try:
        legal_result = run_simple_orchestrator(legal_query, ["legal_jurist"])
        print(legal_result)
    except Exception as e:
        print(f"Erreur dans l'analyse juridique: {e}")
    
    print("\n" + "="*80)
    
    # Test 3: Brainstorming for Business Development
    print("\nüí° BRAINSTORMING - D√âVELOPPEMENT BUSINESS")
    print("-" * 50)
    brainstorm_query = f"SCAMPER: Id√©es pour d√©velopper et am√©liorer cette startup: {startup_description}"
    
    try:
        brainstorm_result = run_simple_orchestrator(brainstorm_query, ["brainstorming"])
        print(brainstorm_result)
    except Exception as e:
        print(f"Erreur dans le brainstorming: {e}")
    
    print("\n" + "="*80)


def test_multi_agent_collaboration():
    """Test automatic agent selection and collaboration."""
    print("\nü§ù TEST DE COLLABORATION AUTOMATIQUE")
    print("=" * 80)
    
    # Test queries that should trigger multiple agents
    test_cases = [
        {
            "query": "Analyse compl√®te d'une startup FinTech avec aspects techniques et juridiques",
            "description": "Devrait d√©clencher les agents technique et juridique"
        },
        {
            "query": "Brainstorm d'id√©es cr√©atives pour am√©liorer la conformit√© l√©gale d'une startup",
            "description": "Devrait d√©clencher les agents brainstorming et juridique"
        },
        {
            "query": "Recherche technique et analyse juridique d'une plateforme d'IA m√©dicale",
            "description": "Devrait d√©clencher les agents technique et juridique"
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìù TEST {i}: {test_case['description']}")
        print(f"Query: {test_case['query']}")
        print("-" * 60)
        
        try:
            result = run_simple_orchestrator(test_case['query'])  # Auto-detection
            print(result)
        except Exception as e:
            print(f"Erreur dans le test {i}: {e}")
        
        print("\n" + "="*80)


def test_sector_specific_analysis():
    """Test sector-specific analysis combining multiple agents."""
    print("\nüè≠ TEST D'ANALYSE SECTORIELLE SP√âCIALIS√âE")
    print("=" * 80)
    
    sectors = [
        {
            "name": "FinTech",
            "description": "Startup de paiement mobile avec IA anti-fraude",
            "focus": "R√©glementation financi√®re et innovation technique"
        },
        {
            "name": "HealthTech", 
            "description": "Dispositif m√©dical connect√© avec algorithmes d'IA",
            "focus": "Conformit√© m√©dicale et faisabilit√© technique"
        },
        {
            "name": "LegalTech",
            "description": "Plateforme d'automatisation juridique par IA",
            "focus": "Aspects juridiques et innovation technologique"
        }
    ]
    
    for sector in sectors:
        print(f"\nüéØ SECTEUR: {sector['name']}")
        print(f"Description: {sector['description']}")
        print(f"Focus: {sector['focus']}")
        print("-" * 60)
        
        # Combined analysis query
        query = f"""
        Analyse compl√®te d'investissement pour une startup {sector['name']}: 
        {sector['description']}. 
        Inclure les aspects techniques, juridiques et r√©glementaires.
        """
        
        try:
            result = run_simple_orchestrator(query, ["technical", "legal_jurist"])
            print(result)
        except Exception as e:
            print(f"Erreur dans l'analyse {sector['name']}: {e}")
        
        print("\n" + "="*80)


def test_investment_decision_support():
    """Test investment decision support using all agents."""
    print("\nüí∞ TEST DE SUPPORT √Ä LA D√âCISION D'INVESTISSEMENT")
    print("=" * 80)
    
    investment_scenario = """
    Un fonds VC √©value l'investissement de 5M‚Ç¨ dans une startup qui d√©veloppe 
    une plateforme SaaS d'IA pour l'optimisation √©nerg√©tique des b√¢timents. 
    La solution analyse les donn√©es de consommation en temps r√©el et propose 
    des recommandations automatis√©es. L'√©quipe compte 15 personnes et vise 
    l'expansion europ√©enne.
    """
    
    print(f"üìä SC√âNARIO D'INVESTISSEMENT:")
    print(investment_scenario)
    print("\n" + "-"*80)
    
    # Sequential analysis with different agents
    analyses = [
        {
            "agent": "technical",
            "focus": "Faisabilit√© technique et innovation",
            "query": f"Analyse technique approfondie: {investment_scenario}"
        },
        {
            "agent": "legal_jurist", 
            "focus": "Conformit√© et risques juridiques",
            "query": f"Analyse juridique et conformit√©: {investment_scenario}"
        },
        {
            "agent": "brainstorming",
            "focus": "Opportunit√©s de d√©veloppement",
            "query": f"Six Thinking Hats: Perspectives d'investissement pour {investment_scenario}"
        }
    ]
    
    for analysis in analyses:
        print(f"\nüîç {analysis['focus'].upper()}")
        print(f"Agent: {analysis['agent']}")
        print("-" * 50)
        
        try:
            result = run_simple_orchestrator(analysis['query'], [analysis['agent']])
            print(result)
        except Exception as e:
            print(f"Erreur dans l'analyse {analysis['agent']}: {e}")
        
        print("\n" + "="*80)


def main():
    """Run all multi-agent collaboration tests."""
    if not ANTHROPIC_API_KEY:
        print("‚ùå Erreur: ANTHROPIC_API_KEY non trouv√©e dans les variables d'environnement.")
        print("Veuillez configurer votre cl√© API dans le fichier .env.")
        return
    
    print("ü§ñ TEST DE COLLABORATION MULTI-AGENTS POUR VC")
    print("üèÜ D√©monstration de l'√©cosyst√®me d'agents collaboratifs")
    print("=" * 80)
    
    try:
        # Test comprehensive startup analysis
        test_startup_investment_analysis()
        
        # Test automatic agent collaboration
        test_multi_agent_collaboration()
        
        # Test sector-specific analysis
        test_sector_specific_analysis()
        
        # Test investment decision support
        test_investment_decision_support()
        
        print("\n‚úÖ TOUS LES TESTS DE COLLABORATION TERMIN√âS AVEC SUCC√àS!")
        print("üéâ L'√©cosyst√®me multi-agents est op√©rationnel pour l'analyse d'investissements!")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Tests interrompus par l'utilisateur.")
    except Exception as e:
        print(f"\n‚ùå Tests √©chou√©s avec l'erreur: {e}")
        print("Veuillez v√©rifier votre configuration et les d√©pendances.")


if __name__ == "__main__":
    main()